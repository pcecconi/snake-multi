// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: snake.proto

package snake

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Direction int32

const (
	Direction_LEFT  Direction = 0
	Direction_RIGHT Direction = 1
	Direction_UP    Direction = 2
	Direction_DOWN  Direction = 3
)

// Enum value maps for Direction.
var (
	Direction_name = map[int32]string{
		0: "LEFT",
		1: "RIGHT",
		2: "UP",
		3: "DOWN",
	}
	Direction_value = map[string]int32{
		"LEFT":  0,
		"RIGHT": 1,
		"UP":    2,
		"DOWN":  3,
	}
)

func (x Direction) Enum() *Direction {
	p := new(Direction)
	*p = x
	return p
}

func (x Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_snake_proto_enumTypes[0].Descriptor()
}

func (Direction) Type() protoreflect.EnumType {
	return &file_snake_proto_enumTypes[0]
}

func (x Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Direction.Descriptor instead.
func (Direction) EnumDescriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{0}
}

// Points are represent positions on the board.
type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{0}
}

func (x *Point) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Point) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type Move struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Dir       Direction `protobuf:"varint,2,opt,name=dir,proto3,enum=snake.Direction" json:"dir,omitempty"`
	PosAtMove *Point    `protobuf:"bytes,3,opt,name=posAtMove,proto3" json:"posAtMove,omitempty"`
}

func (x *Move) Reset() {
	*x = Move{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Move) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Move) ProtoMessage() {}

func (x *Move) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Move.ProtoReflect.Descriptor instead.
func (*Move) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{1}
}

func (x *Move) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Move) GetDir() Direction {
	if x != nil {
		return x.Dir
	}
	return Direction_LEFT
}

func (x *Move) GetPosAtMove() *Point {
	if x != nil {
		return x.PosAtMove
	}
	return nil
}

type MoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId   string    `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	PlayerId string    `protobuf:"bytes,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Dir      Direction `protobuf:"varint,3,opt,name=dir,proto3,enum=snake.Direction" json:"dir,omitempty"`
	Snake    []*Point  `protobuf:"bytes,4,rep,name=snake,proto3" json:"snake,omitempty"`
}

func (x *MoveRequest) Reset() {
	*x = MoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRequest) ProtoMessage() {}

func (x *MoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRequest.ProtoReflect.Descriptor instead.
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{2}
}

func (x *MoveRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *MoveRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *MoveRequest) GetDir() Direction {
	if x != nil {
		return x.Dir
	}
	return Direction_LEFT
}

func (x *MoveRequest) GetSnake() []*Point {
	if x != nil {
		return x.Snake
	}
	return nil
}

type PlayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerName string `protobuf:"bytes,1,opt,name=playerName,proto3" json:"playerName,omitempty"`
}

func (x *PlayRequest) Reset() {
	*x = PlayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayRequest) ProtoMessage() {}

func (x *PlayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayRequest.ProtoReflect.Descriptor instead.
func (*PlayRequest) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{3}
}

func (x *PlayRequest) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

type ActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId   string `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	PlayerId string `protobuf:"bytes,2,opt,name=playerId,proto3" json:"playerId,omitempty"`
}

func (x *ActionRequest) Reset() {
	*x = ActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequest) ProtoMessage() {}

func (x *ActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequest.ProtoReflect.Descriptor instead.
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{4}
}

func (x *ActionRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *ActionRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type GameSetup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomId      string   `protobuf:"bytes,1,opt,name=roomId,proto3" json:"roomId,omitempty"`
	BoardWidth  int32    `protobuf:"varint,2,opt,name=boardWidth,proto3" json:"boardWidth,omitempty"`
	BoardHeight int32    `protobuf:"varint,3,opt,name=boardHeight,proto3" json:"boardHeight,omitempty"`
	PlayerId    string   `protobuf:"bytes,4,opt,name=playerId,proto3" json:"playerId,omitempty"`
	Player2Name string   `protobuf:"bytes,5,opt,name=player2Name,proto3" json:"player2Name,omitempty"`
	Snake1      []*Point `protobuf:"bytes,6,rep,name=snake1,proto3" json:"snake1,omitempty"`
	Snake2      []*Point `protobuf:"bytes,7,rep,name=snake2,proto3" json:"snake2,omitempty"`
	Bait        *Point   `protobuf:"bytes,8,opt,name=bait,proto3" json:"bait,omitempty"`
}

func (x *GameSetup) Reset() {
	*x = GameSetup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSetup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSetup) ProtoMessage() {}

func (x *GameSetup) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSetup.ProtoReflect.Descriptor instead.
func (*GameSetup) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{5}
}

func (x *GameSetup) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *GameSetup) GetBoardWidth() int32 {
	if x != nil {
		return x.BoardWidth
	}
	return 0
}

func (x *GameSetup) GetBoardHeight() int32 {
	if x != nil {
		return x.BoardHeight
	}
	return 0
}

func (x *GameSetup) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

func (x *GameSetup) GetPlayer2Name() string {
	if x != nil {
		return x.Player2Name
	}
	return ""
}

func (x *GameSetup) GetSnake1() []*Point {
	if x != nil {
		return x.Snake1
	}
	return nil
}

func (x *GameSetup) GetSnake2() []*Point {
	if x != nil {
		return x.Snake2
	}
	return nil
}

func (x *GameSetup) GetBait() *Point {
	if x != nil {
		return x.Bait
	}
	return nil
}

type GameUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player1Points int32    `protobuf:"varint,1,opt,name=player1Points,proto3" json:"player1Points,omitempty"`
	Player2Points int32    `protobuf:"varint,2,opt,name=player2Points,proto3" json:"player2Points,omitempty"`
	Bait          *Point   `protobuf:"bytes,3,opt,name=bait,proto3" json:"bait,omitempty"`
	Snake2        []*Point `protobuf:"bytes,4,rep,name=snake2,proto3" json:"snake2,omitempty"`
	GameEnded     bool     `protobuf:"varint,5,opt,name=gameEnded,proto3" json:"gameEnded,omitempty"`
}

func (x *GameUpdate) Reset() {
	*x = GameUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUpdate) ProtoMessage() {}

func (x *GameUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUpdate.ProtoReflect.Descriptor instead.
func (*GameUpdate) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{6}
}

func (x *GameUpdate) GetPlayer1Points() int32 {
	if x != nil {
		return x.Player1Points
	}
	return 0
}

func (x *GameUpdate) GetPlayer2Points() int32 {
	if x != nil {
		return x.Player2Points
	}
	return 0
}

func (x *GameUpdate) GetBait() *Point {
	if x != nil {
		return x.Bait
	}
	return nil
}

func (x *GameUpdate) GetSnake2() []*Point {
	if x != nil {
		return x.Snake2
	}
	return nil
}

func (x *GameUpdate) GetGameEnded() bool {
	if x != nil {
		return x.GameEnded
	}
	return false
}

type ActionAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionId int32 `protobuf:"varint,1,opt,name=actionId,proto3" json:"actionId,omitempty"`
}

func (x *ActionAck) Reset() {
	*x = ActionAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_snake_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionAck) ProtoMessage() {}

func (x *ActionAck) ProtoReflect() protoreflect.Message {
	mi := &file_snake_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionAck.ProtoReflect.Descriptor instead.
func (*ActionAck) Descriptor() ([]byte, []int) {
	return file_snake_proto_rawDescGZIP(), []int{7}
}

func (x *ActionAck) GetActionId() int32 {
	if x != nil {
		return x.ActionId
	}
	return 0
}

var File_snake_proto protoreflect.FileDescriptor

var file_snake_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x22, 0x23, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x22, 0x66, 0x0a, 0x04, 0x4d, 0x6f, 0x76,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x2a, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x41, 0x74, 0x4d, 0x6f,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x41, 0x74, 0x4d, 0x6f, 0x76,
	0x65, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x10, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x64, 0x69, 0x72, 0x12, 0x22, 0x0a, 0x05, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x22, 0x2d, 0x0a,
	0x0b, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x0d,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x91, 0x02, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x75, 0x70, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x31, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x31, 0x12, 0x24, 0x0a,
	0x06, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x6e, 0x61,
	0x6b, 0x65, 0x32, 0x12, 0x20, 0x0a, 0x04, 0x62, 0x61, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x04, 0x62, 0x61, 0x69, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x31, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x32, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x20, 0x0a, 0x04, 0x62, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x62, 0x61,
	0x69, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x32, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x06, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x61, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x67, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x27, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x2a,
	0x32, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x45, 0x46, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x03, 0x32, 0xa0, 0x02, 0x0a, 0x05, 0x53, 0x6e, 0x61, 0x6b, 0x65, 0x12, 0x35, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x12, 0x2e, 0x73,
	0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x75, 0x70, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x47, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x09, 0x41,
	0x62, 0x6f, 0x72, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x12,
	0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x10, 0x2e, 0x73, 0x6e, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x42, 0x38, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x70, 0x63, 0x65, 0x63, 0x63, 0x6f, 0x6e, 0x69, 0x2e, 0x73, 0x6e,
	0x61, 0x6b, 0x65, 0x2d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x42, 0x0a, 0x53, 0x6e, 0x61, 0x6b, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x07, 0x2e, 0x3b, 0x73, 0x6e, 0x61, 0x6b, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_snake_proto_rawDescOnce sync.Once
	file_snake_proto_rawDescData = file_snake_proto_rawDesc
)

func file_snake_proto_rawDescGZIP() []byte {
	file_snake_proto_rawDescOnce.Do(func() {
		file_snake_proto_rawDescData = protoimpl.X.CompressGZIP(file_snake_proto_rawDescData)
	})
	return file_snake_proto_rawDescData
}

var file_snake_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_snake_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_snake_proto_goTypes = []interface{}{
	(Direction)(0),        // 0: snake.Direction
	(*Point)(nil),         // 1: snake.Point
	(*Move)(nil),          // 2: snake.Move
	(*MoveRequest)(nil),   // 3: snake.MoveRequest
	(*PlayRequest)(nil),   // 4: snake.PlayRequest
	(*ActionRequest)(nil), // 5: snake.ActionRequest
	(*GameSetup)(nil),     // 6: snake.GameSetup
	(*GameUpdate)(nil),    // 7: snake.GameUpdate
	(*ActionAck)(nil),     // 8: snake.ActionAck
}
var file_snake_proto_depIdxs = []int32{
	0,  // 0: snake.Move.dir:type_name -> snake.Direction
	1,  // 1: snake.Move.posAtMove:type_name -> snake.Point
	0,  // 2: snake.MoveRequest.dir:type_name -> snake.Direction
	1,  // 3: snake.MoveRequest.snake:type_name -> snake.Point
	1,  // 4: snake.GameSetup.snake1:type_name -> snake.Point
	1,  // 5: snake.GameSetup.snake2:type_name -> snake.Point
	1,  // 6: snake.GameSetup.bait:type_name -> snake.Point
	1,  // 7: snake.GameUpdate.bait:type_name -> snake.Point
	1,  // 8: snake.GameUpdate.snake2:type_name -> snake.Point
	4,  // 9: snake.Snake.GetGameRoom:input_type -> snake.PlayRequest
	5,  // 10: snake.Snake.StartGame:input_type -> snake.ActionRequest
	5,  // 11: snake.Snake.AbortGame:input_type -> snake.ActionRequest
	5,  // 12: snake.Snake.GetGameUpdates:input_type -> snake.ActionRequest
	3,  // 13: snake.Snake.SendMove:input_type -> snake.MoveRequest
	6,  // 14: snake.Snake.GetGameRoom:output_type -> snake.GameSetup
	8,  // 15: snake.Snake.StartGame:output_type -> snake.ActionAck
	7,  // 16: snake.Snake.AbortGame:output_type -> snake.GameUpdate
	7,  // 17: snake.Snake.GetGameUpdates:output_type -> snake.GameUpdate
	8,  // 18: snake.Snake.SendMove:output_type -> snake.ActionAck
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_snake_proto_init() }
func file_snake_proto_init() {
	if File_snake_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_snake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Move); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSetup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_snake_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_snake_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_snake_proto_goTypes,
		DependencyIndexes: file_snake_proto_depIdxs,
		EnumInfos:         file_snake_proto_enumTypes,
		MessageInfos:      file_snake_proto_msgTypes,
	}.Build()
	File_snake_proto = out.File
	file_snake_proto_rawDesc = nil
	file_snake_proto_goTypes = nil
	file_snake_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SnakeClient is the client API for Snake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnakeClient interface {
	// A Simple RPC
	//
	// Requests access to a game room to play
	//
	// A game setup including game room ID, board size and
	// the other player's info
	GetGameRoom(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*GameSetup, error)
	// Signals the server that play started for
	// this player
	StartGame(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionAck, error)
	// Signals the server that this player wants to
	// abort the game
	AbortGame(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*GameUpdate, error)
	// A server-to-client streaming RPC.
	//
	// Obtains the updated position of the other player's snake, points
	// and bait position. Stream ends when there's a winner.
	GetGameUpdates(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (Snake_GetGameUpdatesClient, error)
	// Client-to-server streaming RPC is not supported for web
	// so we make a simple RPC request for every move or
	// position update.
	//
	// Sends my snake movement to the server.
	SendMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*ActionAck, error)
}

type snakeClient struct {
	cc grpc.ClientConnInterface
}

func NewSnakeClient(cc grpc.ClientConnInterface) SnakeClient {
	return &snakeClient{cc}
}

func (c *snakeClient) GetGameRoom(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (*GameSetup, error) {
	out := new(GameSetup)
	err := c.cc.Invoke(ctx, "/snake.Snake/GetGameRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snakeClient) StartGame(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionAck, error) {
	out := new(ActionAck)
	err := c.cc.Invoke(ctx, "/snake.Snake/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snakeClient) AbortGame(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*GameUpdate, error) {
	out := new(GameUpdate)
	err := c.cc.Invoke(ctx, "/snake.Snake/AbortGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snakeClient) GetGameUpdates(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (Snake_GetGameUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Snake_serviceDesc.Streams[0], "/snake.Snake/GetGameUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &snakeGetGameUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Snake_GetGameUpdatesClient interface {
	Recv() (*GameUpdate, error)
	grpc.ClientStream
}

type snakeGetGameUpdatesClient struct {
	grpc.ClientStream
}

func (x *snakeGetGameUpdatesClient) Recv() (*GameUpdate, error) {
	m := new(GameUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *snakeClient) SendMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*ActionAck, error) {
	out := new(ActionAck)
	err := c.cc.Invoke(ctx, "/snake.Snake/SendMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnakeServer is the server API for Snake service.
type SnakeServer interface {
	// A Simple RPC
	//
	// Requests access to a game room to play
	//
	// A game setup including game room ID, board size and
	// the other player's info
	GetGameRoom(context.Context, *PlayRequest) (*GameSetup, error)
	// Signals the server that play started for
	// this player
	StartGame(context.Context, *ActionRequest) (*ActionAck, error)
	// Signals the server that this player wants to
	// abort the game
	AbortGame(context.Context, *ActionRequest) (*GameUpdate, error)
	// A server-to-client streaming RPC.
	//
	// Obtains the updated position of the other player's snake, points
	// and bait position. Stream ends when there's a winner.
	GetGameUpdates(*ActionRequest, Snake_GetGameUpdatesServer) error
	// Client-to-server streaming RPC is not supported for web
	// so we make a simple RPC request for every move or
	// position update.
	//
	// Sends my snake movement to the server.
	SendMove(context.Context, *MoveRequest) (*ActionAck, error)
}

// UnimplementedSnakeServer can be embedded to have forward compatible implementations.
type UnimplementedSnakeServer struct {
}

func (*UnimplementedSnakeServer) GetGameRoom(context.Context, *PlayRequest) (*GameSetup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameRoom not implemented")
}
func (*UnimplementedSnakeServer) StartGame(context.Context, *ActionRequest) (*ActionAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (*UnimplementedSnakeServer) AbortGame(context.Context, *ActionRequest) (*GameUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortGame not implemented")
}
func (*UnimplementedSnakeServer) GetGameUpdates(*ActionRequest, Snake_GetGameUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGameUpdates not implemented")
}
func (*UnimplementedSnakeServer) SendMove(context.Context, *MoveRequest) (*ActionAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMove not implemented")
}

func RegisterSnakeServer(s *grpc.Server, srv SnakeServer) {
	s.RegisterService(&_Snake_serviceDesc, srv)
}

func _Snake_GetGameRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnakeServer).GetGameRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snake.Snake/GetGameRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnakeServer).GetGameRoom(ctx, req.(*PlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snake_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnakeServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snake.Snake/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnakeServer).StartGame(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snake_AbortGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnakeServer).AbortGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snake.Snake/AbortGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnakeServer).AbortGame(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snake_GetGameUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ActionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnakeServer).GetGameUpdates(m, &snakeGetGameUpdatesServer{stream})
}

type Snake_GetGameUpdatesServer interface {
	Send(*GameUpdate) error
	grpc.ServerStream
}

type snakeGetGameUpdatesServer struct {
	grpc.ServerStream
}

func (x *snakeGetGameUpdatesServer) Send(m *GameUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Snake_SendMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnakeServer).SendMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snake.Snake/SendMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnakeServer).SendMove(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snake_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snake.Snake",
	HandlerType: (*SnakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameRoom",
			Handler:    _Snake_GetGameRoom_Handler,
		},
		{
			MethodName: "StartGame",
			Handler:    _Snake_StartGame_Handler,
		},
		{
			MethodName: "AbortGame",
			Handler:    _Snake_AbortGame_Handler,
		},
		{
			MethodName: "SendMove",
			Handler:    _Snake_SendMove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGameUpdates",
			Handler:       _Snake_GetGameUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "snake.proto",
}
