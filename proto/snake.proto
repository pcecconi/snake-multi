// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.github.pcecconi.snake-multi";
option java_outer_classname = "SnakeProto";
option go_package = ".;snake";

package snake;

// Interface exported by the server.
service SnakeService {
  // A Simple RPC
  //
  // Requests access to a game room to play
  //
  // A game setup including game room ID, board size and 
  // the other player's info
  rpc GetGameRoom(PlayRequest) returns (GameSetup) {}

  // Signals the server that play started for 
  // this player
  rpc StartGame(ActionRequest) returns (ActionAck) {}

  // Signals the server that this player wants to 
  // abort the game
  rpc AbortGame(ActionRequest) returns (GameUpdate) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the updated position of the other player's snake, points
  // and bait position. Stream ends when there's a winner.
  rpc GetGameUpdates(ActionRequest) returns (stream GameUpdate) {}

  // Client-to-server streaming RPC is not supported for web 
  // so we make a simple RPC request for every move or 
  // position update.
  //
  // Sends my snake movement to the server. 
  rpc SendMove(MoveRequest) returns (ActionAck) {}
}

// Points are represent positions on the board.
message Point {
    int32 x = 1;
    int32 y = 2;
}

enum Direction {
    LEFT = 0;
    RIGHT = 1;
    UP = 2;
    DOWN = 3;
}

message Snake {
    repeated Point cells = 1;
    Direction dir = 2;
}

message Move {
    int32 id = 1;
    Direction dir = 2;
    Point posAtMove = 3;
}

message MoveRequest {
    string roomId = 1;
    string playerId = 2;
    Snake snake = 3;
}

message PlayRequest {
    string playerName = 1;
}

message ActionRequest {
    string roomId = 1;
    string playerId = 2;
}

message GameSetup {
    string roomId = 1;
    string playerId = 2;
    int32 playerIdx = 3;
    int32 boardWidth = 4;
    int32 boardHeight = 5;
    repeated string playerNames = 6;
    repeated Snake snakes = 7;
    Point bait = 8;
}

message GameUpdate {
    repeated int32 scores = 1;
    Point bait = 2;
    repeated Snake snakes = 3;
    bool gameEnded = 4;
}

message ActionAck {
    int32 actionId = 1;
}