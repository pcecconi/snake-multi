// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.routeguide";
option java_outer_classname = "RouteGuideProto";
option go_package = ".;snake";

package snake;

// Interface exported by the server.
service Snake {
  // A Simple RPC
  //
  // Requests access to a game room to play
  //
  // A game setup including game room ID, board size and 
  // the other player's info
  rpc GetGameRoom(PlayRequest) returns (GameSetup) {}

  // A server-to-client streaming RPC.
  //
  // Obtains the updated position of the other player's snake, points
  // and bait position. Stream ends when there's a winner.
  rpc GetGameUpdates(UpdateRequest) returns (stream GameUpdate) {}

  // A client-to-server streaming RPC.
  //
  // Sends my snake movements to the server. When I stop
  // sending movements I get a summary of the game.
  rpc Play(stream Move) returns (GameSummary) {}

}

// Points are represent positions on the board.
message Point {
    int32 x = 1;
    int32 y = 2;
}

message Move {
    enum Direction {
        LEFT = 0;
        RIGHT = 1;
        UP = 2;
        DOWN = 3;
    }
    int32 id = 1;
    Direction dir = 2;
    Point posAtMove = 3;
}

message PlayRequest {
    string playerId = 1;
    string playerName = 2;
}

message GameSetup {
    string roomId = 1;
    int32 boardWidth = 2;
    int32 boardHeight = 3;
    // string player2Id = 4;
    // string player2Name = 5;
    // Point player1Head = 6;
    // Point player2Head = 7;
    // Point bait = 8;
}

message UpdateRequest {
    string roomId = 1;
}

message GameUpdate {
    int32 player1Points = 1;
    int32 player2Points = 2;
    Point bait = 3;
    Move player2LastMove = 4;
}

message GameSummary {
    int32 player1Points = 1;
    int32 player2Points = 2;
    bool gameEnded = 3;
    int32 elapsed_time = 4;
}